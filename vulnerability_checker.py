"""
vulnerability_checker.py

This module checks for outdated or vulnerable software based on TCP service data
returned by a Nmap scan. It parses and compares version strings to flag software
that does not meet the current stable baseline.

As of March 2, 2025, the latest stable versions are:
- OpenSSH: 9.9p2 (threshold: 9.9.2)
- Apache HTTP Server: 2.4.57 (threshold: 2.4.57)
- MySQL: 8.0.34 (threshold: 8.0.34)
- NGINX: 1.23.3 (threshold: 1.23.3)

Extend these checks or add new ones as needed.
"""

import re
import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)

def parse_version(version_str):
    """
    Parse a version string into a tuple of integers.
    Non-numeric parts are ignored.
    For example, '9.9p2' becomes (9, 9, 2).
    """
    version_nums = re.findall(r'\d+', version_str)
    return tuple(map(int, version_nums)) if version_nums else ()

def compare_versions(v1, v2):
    """
    Compare two version tuples.

    Returns:
        -1 if v1 < v2
         0 if v1 == v2
         1 if v1 > v2
    """
    max_len = max(len(v1), len(v2))
    for i in range(max_len):
        part1 = v1[i] if i < len(v1) else 0
        part2 = v2[i] if i < len(v2) else 0
        if part1 < part2:
            return -1
        elif part1 > part2:
            return 1
    return 0

def check_for_outdated_services(tcp_data):
    """
    Examine the TCP service data from a Nmap scan for outdated or vulnerable software.

    Args:
        tcp_data (dict): Dictionary keyed by port numbers with service info.

    Returns:
        list: A list of alert strings for services that are deemed outdated.
    """
    alerts = []

    for port, info in tcp_data.items():
        service_name = info.get("name", "").lower()
        product = info.get("product", "").lower()
        version_str = info.get("version", "")

        # Check for OpenSSH vulnerabilities:
        if service_name == "ssh" and "openssh" in product:
            version_tuple = parse_version(version_str)
            # Latest stable: 9.9p2 -> (9, 9, 2)
            threshold = (9, 9, 2)
            if version_tuple and compare_versions(version_tuple, threshold) == -1:
                alerts.append(
                    f"OpenSSH {version_str} on port {port} is outdated (expected >= 9.9p2)"
                )

        # Check for Apache HTTP Server vulnerabilities:
        if service_name == "http" and "apache" in product:
            version_tuple = parse_version(version_str)
            # Latest stable: 2.4.57
            threshold = (2, 4, 57)
            if version_tuple and compare_versions(version_tuple, threshold) == -1:
                alerts.append(
                    f"Apache HTTP Server {version_str} on port {port} is outdated (expected >= 2.4.57)"
                )

        # Check for MySQL vulnerabilities:
        if service_name == "mysql" and "mysql" in product:
            version_tuple = parse_version(version_str)
            # Latest stable: 8.0.34
            threshold = (8, 0, 34)
            if version_tuple and compare_versions(version_tuple, threshold) == -1:
                alerts.append(
                    f"MySQL {version_str} on port {port} is outdated (expected >= 8.0.34)"
                )

        # Check for NGINX vulnerabilities:
        if service_name in ("http", "https") and "nginx" in product:
            version_tuple = parse_version(version_str)
            # Latest stable: 1.23.3
            threshold = (1, 23, 3)
            if version_tuple and compare_versions(version_tuple, threshold) == -1:
                alerts.append(
                    f"NGINX {version_str} on port {port} is outdated (expected >= 1.23.3)"
                )

    return alerts

if __name__ == "__main__":
    # Example dummy TCP data for testing purposes.
    test_tcp_data = {
        22: {"name": "ssh", "product": "OpenSSH", "version": "9.5p1"},
        80: {"name": "http", "product": "Apache httpd", "version": "2.4.50"},
        3306: {"name": "mysql", "product": "MySQL", "version": "8.0.33"},
        443: {"name": "https", "product": "NGINX", "version": "1.23.2"}
    }
    alerts = check_for_outdated_services(test_tcp_data)
    if alerts:
        for alert in alerts:
            print(alert)
    else:
        print("No vulnerabilities detected.")
